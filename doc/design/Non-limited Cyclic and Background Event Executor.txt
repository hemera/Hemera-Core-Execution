Non-limited Cyclic and Background Event Executor:
Design:
1. The amount of cyclic and background executors are
   not limited within the system. Though native OS
   and VM may present limitations.
Justification:
1. Based on pure CPU bound Fibonacci number calculation
   simulation, even running thousands of threads on a
   duo-core machine does not decrease the performance.
   Therefore, the number of threads does not hinder the
   computation performance in any ways.
2. System performance may suffer significantly if cyclic
   or background executor sharing is enabled. Since
   cyclic and background tasks may involve significant
   blocking time, if multiple tasks share the same thread,
   the tasks buffered at the end of the queue may get
   significant delays before execution or even never
   executed at all. If a task is buffered behind a server
   incoming connection monitoring task, the task may never
   be executed since the there may never be any incoming
   connections resulting an ever blocking connection
   detection task.
3. The complexity of maintaining the correct cycle time
   limit on a shared cyclic executor outweighs benefits
   of sharing. Concurrent and fast sorting data structures
   are needed and they are complex in nature. Incorrect
   estimates may lead to wasted computation cycles.
4. Sharing of cyclic executor means that the buffered
   cyclic tasks are very unlikely to be executed at the
   desired execution rate. Thus system integrity can be
   compromised.